SHEET4
#+SETUPFILE: options.org
* TODO Sheet4
  DEADLINE: <2009-11-18 Mer>
  
* Exercise 1
** (a) /coprime/ function
   
#+begin_src haskell
  coprime :: Int -> [Int]
  coprime x = [ y | y <- [1..x], gcd x y == 1 ]
#+end_src

   
** (b) /split/ function
  
#+begin_src haskell
  splits :: [a] -> [([a], [a])]
  splits xs = [ (take n xs, drop n xs) | n <- [0..(length xs)]]
#+end_src
   
* Exercise 2
** (a) /factorial/ function
   
#+begin_src haskell
  -- There are many different ways to define the factorial funciton
  -- I will point one some interesting ones
  
  fact1, fact2, fact3, fact4 :: Int -> Int
  fact1 0 = 1
  fact1 x = x * (fact1 (x - 1))
  
  -- using folding
  fact2 x = foldl (*) 1 [1..x]
  
  -- even easier
  fact3 x = product [1..x]
  
  -- using scan, factorial in a constructive way
  fact4 x = last $ scanl (*) 1 [1..x]
  
  -- infinite list of all factorials
  factorials = scanl (*) 1 [1..]
#+end_src

** (b) /sumWhile/ function
   
#+BEGIN_SRC haskell
  sumListCond :: Int -> Int -> [Int] -> Int
  sumListCond l n xs
      |foldl (+) 0 (take l xs) <= n = sumListCond (l + 1) n xs
      |otherwise = foldl (+) 0 (take (l - 1) xs)
  sumWhile :: Int -> [Int] -> Int
  sumWhile n xs = sumListCond 0 n xs
  -- This other function is more elegant and use "inits" from Data.List
  -- of my list (for example inits [1, 2] -> [[], [1], [1,2]])
  -- them map sum over them and takes the last element found which is
  -- still less than max.
  -- works on infinite lists because takeWhile stops when sum >= max
  sumWhile2 :: Int -> [Int] -> Int
  sumWhile2 max xs = last $ takeWhile (< max) (map sum (inits xs))
#+END_SRC

* Exercise 3
#+begin_src haskell
  -- The complexity can be linear if the calculation of the next row of
  -- the triangle harnesses the result of the last calculated row.
  
  zipWithPad :: (a -> b -> c) -> a -> b -> [a] -> [b] -> [c]
  zipWithPad f v w [] []         = []
  zipWithPad f v w (x:xs) []     = (f x w) : zipWithPad f v w xs []
  zipWithPad f v w [] (y:ys)     = (f v y) : zipWithPad f v w [] ys
  zipWithPad f v w (x:xs) (y:ys) = (f x y) : zipWithPad f v w xs ys
  
  nextRow :: [[Int]] -> [[Int]]
  nextRow (x:xs) = ([1] ++ zipWithPad (+) 0 0 x (drop 1 x)) : nextRow xs
  
  pascal2 :: [[Int]]
  pascal2 = [1] : nextRow pascal2
#+end_src
