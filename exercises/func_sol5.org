SHEET5
#+STARTUP: showall
#+SETUPFILE: options.org
#+OPTIONS: \n:nil

* TODO
  DEADLINE: <2009-11-25 Mer>

* Exercise 1
** (a) /getText/

#+BEGIN_SRC haskell 
getText :: IO String
getText = do
  x <- getChar
  if x == '\n'
     then
         return ""
     else do
         xs <- getText
         return (x:xs)
#+END_SRC
   
   
** (b) /getInt/
   
#+BEGIN_SRC haskell 
getInt :: IO Int
getInt = do
  n <- getText
  return (read n::Int)
#+END_SRC


** (c) /draw/
   
#+BEGIN_SRC haskell 
draw :: IO ()
draw = do
  putStr "Please enter a non-negative integer: "
  n <- getInt
  mapM_ (\_ ->putStrLn (concat $ replicate n "*")) [1..n]
  -- would be even better using replicateM_ from Control.monad
  -- replicateM_ n (\_ -> put ...)
#+END_SRC

* Exercise 2
  Given the following:

#+BEGIN_SRC haskell 
data MyMaybe a = Value a | Error

instance Monad MyMaybe where
    return = Value
    Error >>= q = Error
    Value x >>= q = q x
    
instance Show a => Show (MyMaybe a) where
    show Error = "an error occurred"
    show (Value x) = show x
#+END_SRC

** (a) Prove the three monad laws for it
   Before starting we number the three "rules" that we already have to be able to reference them later.

#+BEGIN_SRC haskell
   return = Value               (1)
   Error >>= q = Error          (2)
   Value x >>= q = q x          (3)
#+END_SRC

*** (1) p >>= return = p
    We have 2 cases:
    - (Value x) >>= return = return x (3)
      return x = Value x (1)
    - Error >>= return = Error (2)
      
#     If p is Value a, Value a >>= return = Value a, which is p, because return = Value.
#     If p is Error, Error >>= return = Error, which is p, because Error >>= q = Error.
#     Therefore, it has been shown that p >>= return = p is satisfied.

*** (2) return x >>= f = f x
     - return x = Value x (1)
     - Value x >>= f = f x (3)

#     If x is a, return a >>= f = Value a >>= f
#     = f a, which is f x, because Value x >>= q = q x.
#     Therefore, it has been shown that return x >>= f = f x is satisfied.

*** (3) (p >>= \x -> q) >>= \y - >r = p >>= \x -> (q >>= \y -> r)
    
    As before we have to check the law on *Error* and *Value*.
#     We use \beta reductions to further simplify our expressions, which is simply the rule.
#     *(\lambda x.x) s = \rightarrow x[x:=s]*

#     To show that the equivalence is satisfied we construct a chain of equivalences for the left side and the right side that takes to the same result.
#     Given the transitivity of the equivalence we will then be able to conclude that the starting left and right side are equivalent.
#     + Case p = Error
#       This case is quite simple because for rule 2 we can always pattern matches what's on the right of the >>= operator.
#       + Left side
# 	+ (Error >>= \x -> q) >>= \y -> r = Error >>= \y -> r (2)
# 	+ Error >>= \y -> r = Error (2)
#       + Right side
# 	+ Error >>= \x -> (q >>= \y -> r)
# 	+ Error (2)

#     + Case p = Value x
#       + Left side
# 	- (Value x >>= \x -> q) >>= \y -> r = (q[x:Value x]) >>= \y -> r (3)
# 	- (q[x:Value x]) >>= \y -> r = r[y:q[x:Value x]]
# 	- 
#       - (Value x >>= \x -> q) = (\x -> q) x = q  (3 and \beta reduction)
#       - q >>= \y -> r = r (3 and \beta reduction)
#       - r = p >>= \x -> (q >>= \y -> r) (3 and \beta reduction)
#       - r = q >>= \y -> r (3 and \beta reduction)
#       - r = r

#     So we dimonstrated for both possible cases, the monad law is then valid.

    If p is Error, the left-hand side evaluates as follows:
    (Error >>= \x -> q) is Error, and subsequently (p >>= \x -> q) >>= \y -> r is Error because Error >>= q = Error. 
    While if p is Error, the right-hand side evaluates as follows: 
    (q >>= \y -> r) has to evaluate to Error to satisfy Error >>= q = Error because p is Error. 
    Hence, both the left-hand side and the right-hand side evaluate the same. 

    
    If p is Value a, the left-hand side evaluates as follows: 
    (p >>= \x -> q) can be Value b or Error.
    If (p >>= \x -> q) is Value b, (p >>= \x -> q) >>= \y -> r can be Value c or Error. 
    If (p >>= \x -> q) is Error, (p >>= \x -> q) >>= \y -> r is Error.
    While if p is Value a, the right-hand side evaluates as follows:
    (q >>= \y -> r) can be Value c or Error.
    If (q >>= \y -> r) is Value c, p must not Error because Error >>= q = Error. 
    Since p is Value a, there is no contradiction. 
    If (q >>= \y -> r) is Error, p >>= \x -> (q >>= \y -> r), p can be Value a or Error since Value x >>= q = q x. 
    Since p can be Value a and it is, there is no contradiction.
    Thus, both the left-hand side and the right-hand side evaluate the same. 
    
    Therefore, it has been shown that (p >>= \x -> q) >>= \y -> r = p >>= \x -> (q >>= \y -> r), if x does not ocur in r, is satisfied. 

** (b) Extend the data type Term with logarithm and let eval handle it

#+BEGIN_SRC haskell 
data Term = Con Float | Div Term Term | Log Term

eval :: Term -> MyMaybe Float
eval (Log x) = do
  y <- eval x
  if y <= 0 then Error else return $ log y

eval (Con x) = Value x
eval (Div t u) = do
  x <- eval t
  y <- eval u
  if y /= 0 then return (x/y) else Error
#+END_SRC


** (c) Replace MyMaybe with MyMaybe2 which must distinguish from the type of error and return a string
   
#+BEGIN_SRC haskell
data MyMaybe2 a = Value2 a | Error2 String

instance Monad MyMaybe2 where
    return = Value2
    Error2 x >>= q = Error2 x
    Value2 x >>= q = q x
    
instance Show a => Show (MyMaybe2 a) where
    show (Value2 x) = show x
    show (Error2 err) = err

eval2 :: Term -> MyMaybe2 Float
eval2 (Log x) = do
  y <- eval2 x
  if y <= 0
  then Error2 ("Cannot take logarithm of non-positive number "
               ++ show y ++ "!")
  else return $ log y

eval2 (Con x) = Value2 x
eval2 (Div t u) = do
  x <- eval2 t
  y <- eval2 u
  if y /= 0 then return (x/y) else Error2 "Cannot divide by zero!"
#+END_SRC

