SHEET3
#+SETUPFILE: options.org

* DONE Sheet3
  DEADLINE: <2009-11-11 Mer> CLOSED: [2009-11-17 Mar 16:16]
  
* Exercise 1
** (a)
#+BEGIN_SRC haskell
  data Polynomial a = Const a | Var String | 
                      Sum (Polynomial a) (Polynomial a) | 
                      Prod (Polynomial a) (Polynomial a)
#+END_SRC

** (b)
#+BEGIN_SRC haskell
  instance (Show a) => Show (Polynomial a) where
      show (Var x) = x
      show (Const x) = show x
      show (Prod x y) = "(" ++ show x ++ " * " ++ show y ++ ")"
      show (Sum x y) = "(" ++ show x ++ " + " ++ show y ++ ")"
#+END_SRC

** (c)
#+BEGIN_SRC haskell
  class PlusTimes a where
      plus :: a -> a -> a
      times :: a -> a -> a
#+END_SRC

** (d)
#+BEGIN_SRC haskell
  instance PlusTimes Int where
      plus x y = x + y
      times x y = x * y
#+END_SRC

** (e)
#+BEGIN_SRC haskell
   data Tropical = Finite Int | Infinity
   instance Show Tropical where
         show (Finite x) = show x
         show Infinity = "infinity"
#+END_SRC

** (f)
#   For the case of plus(x, inf) and plus(inf, x), x is defined as x <- T not x <- Z
#+BEGIN_SRC haskell
  instance PlusTimes Tropical where
        plus x Infinity = x
        plus Infinity x = x
        plus (Finite x) (Finite y) = Finite (min x y)
  
        times _ Infinity = Infinity
        times Infinity _ = Infinity
        times (Finite x) (Finite y) = Finite (x + y)
#+END_SRC

** (g)
#+BEGIN_SRC haskell
  instance Eq Tropical where
      (Finite x) == (Finite y) = x == y
      Infinity == Infinity = True
      _ == _ = False
  
  instance Ord Tropical where
      (Finite x) > (Finite y) = x > y
      Infinity > (Finite _) = True
      (Finite _) > Infinity = False
#+END_SRC
  

** (h)
#+BEGIN_SRC haskell
  class (Ord a, PlusTimes a) => Interpretable a where
    interpret :: Polynomial a -> (String -> a) -> a
    gt :: Polynomial a -> Polynomial a -> (String -> a) -> Bool
    interpret (Var x) m = m x
    interpret (Sum x y) m = plus (interpret x m) (interpret y m)
    interpret (Prod x y) m = times (interpret x m) (interpret y m)
    interpret (Const x) _ = x
    gt polX polY m = (interpret polX m) > (interpret polY m)

   -- nothing else needed, the implementation in the class always works
   instance Interpretable Int
   instance Interpretable Tropical
#+END_SRC

   
* Exercise 2

** (a)

#+BEGIN_SRC haskell
  data Tree a b = Empty | Node a (Tree b a) (Tree b a) deriving Show
  
  mapTree :: (a -> c) -> (b -> d) -> Tree a b -> Tree c d
  mapTree _ _ Empty = Empty
  mapTree f1 f2 (Node x y z) =
          Node (f1 x) (mapTree f2 f1 y) (mapTree f2 f1 z)
#+END_SRC

** (b)
   
#+BEGIN_SRC haskell
  foldTree :: (a -> c -> c -> c) -> (b -> c -> c -> c) -> c -> Tree a b -> c
  -- "foldTree fa fb e t" replaces all occurences of
  foldTree _ _ e Empty = e
  foldTree fa fb e (Node x y z) = fa x (foldTree fb fa e y) (foldTree fb fa e z)
#+END_SRC

** (c)

#+BEGIN_SRC haskell
  countABs :: Tree a b -> (Int, Int)
  countABs t = (foldTree (adder 1) (adder 0) 0 t, foldTree (adder 0) (adder 1) 0 t)
               where adder w = \_ y z -> w + y + z
#+END_SRC
