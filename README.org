Different strategies of evaluation


* Innermost
  call by value

* Outermost
  call by name

** Pros
   Only evaluate subexpressions needed for overall result

** Cons
   Sometimes you have to evaluate more than once some of the expressions


Haskell uses the so called *lazy evaluation*

Basically outermost evaluation, but keeping memory of *different evaluations*, keeping tracks of duplicates and evaluates them all in parallel.

An example where outermost is better could be

#+BEGIN_SRC haskell
three :: Int -> Int
three x = 3
costly :: Int -> Int
costly x = longcomputation
#+END_SRC

and here *three (costly x)* with innermost would take a very long time but the result is always 3.

We can define functions that work on infinite data structures.


* DECLARATIONS
** Conditional defining equations

#+BEGIN_SRC haskell
  -- you can use tuples here
  maxi :: (Int, Int) -> Int
  maxi (x, y)
  | x >= y = x
  | otherwise = y
#+END_SRC


** Currying

#+BEGIN_SRC haskell
  -- equivalent solution
  plus :: Int -> Int -> Int
  plus :: (Int, Int) -> Int
  plus :: Int -> (Int -> Int) -- takes int and returns another functions
#+END_SRC

  Application always associates *to the left*

  I can define a higher order function
  
#+BEGIN_SRC haskell
  suc :: Int -> Int
  suc = plus 1
#+END_SRC

*** Advantages of currying
    - Apply functions to only one argument


** Pattern matching

The order does matter, the first matching expression will be executed

#+BEGIN_SRC haskell
  und :: Bool -> Bool -> Bool
  und True y = y
  und False y = False
#+END_SRC

*** Pattern matching for different data structures
#+BEGIN_SRC haskell
   Bool -> True | False
   [a] -> [] | a : [a]

   len :: [a] -> Int
   len [] = 0
   len (x:xs) = 1 + len xs
#+END_SRC

#+resname:
: <interactive>:1:11: parse error on input `='

** Pattern declaration
  Assign a unique value to every variable in the pattern.
 
#+BEGIN_SRC haskell
  x1, y1 :: Int
  [x1, y1] = [1,2]
  -- every variable gets an unique value
#+END_SRC
  

** Operators Infix declarations
   2 + 3 \rightarrow infix symbol
   (+) \rightarrow prefix symbol
   
   Fixity can be shifted between prefix/infix.

** Association
   We normally associate to the right, but we can define ourselves where the associativity should go.
   *infixl* *infixr*
   *infix*, associates neither to left or right
   45 `divide` 5 `divide` 3 gives error in this case
   
   - *:* associates to the right, 3:4:[] \rightarrow 3:(4:[])

   - function application associates to the left (square square 3)


** Priority
   We can define a number of priority in infix priority (between 0 and 9 (which is default)).
   *infixl 9 %%*
   *infixl 8 @@*


* Expressions
  First haskell checks the type and IF is well typed than the expression is evaluated.


* Programming with lazy evaluation
  - In general we use leftmost evaluation
  - some pre-defined arithmetical operators require fully evaluated arguments
  - with pattern matching arguments are evaluated until one can decide which to pick

* Monads
  *return :: a -> IO a*
  Does nothing and incapsulates an object of type a.
  
  *(>>) :: IO a -> IO b -> IO b*
  chain something somewhere else.

  For example:
  *getChar >> return ()* takes a character and then ignores it.

  *(>>=) :: Io a -> (a -> IO b) *
  It gives you back another action.

  Getting input from the shell:

#+begin_src haskell
  gets :: Int -> IO String
  gets 0 = return []
  gets (n+1) = getChar >>= \x -> gets n
  -- which can be written much better as
  
  gets = do
    x <- getChar
    xs <- gets
    return (x:xs)
#+end_src

    In general monads are used to separate computations from inside the monads.
